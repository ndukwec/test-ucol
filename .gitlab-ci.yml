variables:
  IMAGE_TAG: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
  # DATABASE_URL: "" # Depends on the situation
stages:
  - build-image
  - test
  - deploy
  # Note we can also add a sast stage see line 53 below

build-image:
  image: docker:latest
  stage: build-image
  services:
    - docker:dind
  tags:
    - docker

  script:
    - export
    - docker build -t $IMAGE_TAG .
    # - docker login -u  -p # auth to container registry
    # - docker push $IMAGE_TAG

# student tests
# Note that I have test 1, 2, 3 but these can be easily renamed to be actual specific job_names
# also each job can have a before and after script
test 1:
  stage: test
  script: # here we'll specify our actual test script
    # e.g - python manage.py test for a Django application.
    # In our case we can test the id_func function we have in the python script included with python3 -m unittest testingidentityfunc.py
      - echo "Running student test"
      - python3 -m unittest testingidentityfunc.py
  allow_failure: false

# open tests
test 2:
  stage: test
  script: 
      - echo "Running open test" 
      # specify test script
  allow_failure: false

# closed tests
test 3:
  stage: test
  script: 
      - echo "Running closed test" 
      - sh test.sh # specifying our closed test script
  allow_failure: false

deploy:
  stage: deploy
  image: # Here we specify the image we wish to deploy
  script:
    - echo "trying to deploy"

# sast:
#   stage: sast
#   image: docker:stable
#   variables:
#     DOCKER_DRIVER: # we can specify the docker driver i.e OverlayFS storage driver: e.g overlay2
#   allow_failure:
#   services:
#     - docker:stable-dind
#   script:
#     - export SP_VERSION=$ # We can export the CI server version etc
#     - docker run
#         # We can set the confidence level, volume etc
#   artifacts:
#     reports:
#       sast: gl-sast-report.json

